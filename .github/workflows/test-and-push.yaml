name: Copy to container-binaries bucket
on:
  workflow_dispatch: {}
  push:
    paths:
      - logs/*/PACKAGES
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Free root space
        uses: almahmoud/free-root-space@main
        with:
          verbose: true
 
      - name: Maximize build space
        uses: easimon/maximize-build-space@v6
        with:
          root-reserve-mb: 71680
          swap-size-mb: 1024
          overprovision-lvm: true

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          persist-credentials: true

      - id: variables
        continue-on-error: true
        run: |
          if [ ! -f "runstarttime" ]; then exit 1; fi
          if [ ! -f "logs/$(cat runstarttime)/PACKAGES" ]; then exit 1; fi
          echo platform=$(cat PLATFORM.bioc) >> $GITHUB_OUTPUT
          echo testcontainer=$(cat ROOT_CONTAINER.bioc | sed "s#:#:test-#g") >> $GITHUB_OUTPUT
          echo biocver=$(cat bioc_build/bioc | sed 's/ /./g') >> $GITHUB_OUTPUT
          
          mkdir -p /tmp/image

          # Pick 5 random built packages to test installing
          grep -irl "tar.gz$" | awk -F'/' '{print $NF}' > /tmp/alltars
          grep -Pzo "(?s)\s*\"\N*\":\s*\[" biocdeps.json | awk -F'"' '{print $2}' | grep -v '^$' > /tmp/allbioc
          comm -12 <(sort /tmp/alltars) <(sort /tmp/allbioc) > /tmp/builtbioc
          shuf -n 5 /tmp/builtbioc > randompkgs
          cat << EOF > test.Dockerfile
          FROM $(cat CONTAINER_BASE_IMAGE.bioc)
          COPY randompkgs /tmp/randompkgs
          COPY containername /tmp/containername
          COPY runstarttime /tmp/runstarttime
          COPY arch /tmp/arch
          RUN mkdir -p library && cat /tmp/randompkgs | xargs -i bash -c "curl -o library/{}.tar.gz https://js2.jetstream-cloud.org:8001/swift/v1/gha-build/$(cat containername)/$(cat arch)/$(cat runstarttime)/libraries/{}.tar.gz && (cd library && tar -xvf {}.tar.gz && rm {}.tar.gz && rm -rf {}) && Rscript -e \"p <- .libPaths(); p <- c('$(pwd)/library', p); .libPaths(p); BiocManager::install('{}', site_repository = 'https://js2.jetstream-cloud.org:8001/swift/v1/gha-build/$(cat containername)/$(cat arch)/$(cat runstarttime)/binaries/')\""
          EOF

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
        if: contains(steps.variables.outputs.platform, 'arm64') && steps.variables.outcome=='success'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: ${{ steps.variables.outputs.platform }}
        if: steps.variables.outcome=='success'

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: steps.variables.outcome=='success'

      - name: Test libraries in buildx emulator
        id: dockerbuild
        uses: docker/build-push-action@v3
        with:
          file: test.Dockerfile
          push: false
          load: false
          outputs: type=tar,dest=/tmp/image/bioc_test.tar
          context: .
          tags: ${{ steps.variables.outputs.testcontainer }}
          platforms: ${{ steps.variables.outputs.platform }}
        if: steps.variables.outcome=='success'

      - name: Install rclone & add rclone conf file
        uses: nick-fields/retry@v2
        env:
            RCLONE_CONF: ${{secrets.RCLONE_CONF}}
        with:
          timeout_minutes: 20
          max_attempts: 10
          shell: bash
          command: |
            set -xe
            sudo -v ; curl https://rclone.org/install.sh | sudo bash || true
            echo "$RCLONE_CONF" > ~/.rclone.conf
            if ! command -v rclone &> /dev/null
            then
                echo "rclone could not be found"
                exit 1;
            fi

      - run: |
          rclone copyto js2:/gha-build/$(cat containername)/$(cat arch)/$(cat runstarttime)/binaries/src/contrib js2:/${{steps.variables.outputs.biocver}}/container-binaries/$(cat containername)/$(cat arch)/binaries/src/contrib -vvvvvv
          rclone purge js2:/gha-build/$(cat containername)/$(cat arch)/$(cat runstarttime)/libraries -vvvvv
        if: steps.variables.outcome=='success'

      - name: Copy old run
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            set -x
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git pull origin main || git reset --hard origin/main
            STARTTIME="$(cat runstarttime)" || true
            LOGDIR="logs/$STARTTIME" || true
            echo "${{steps.variables.outputs.biocver}}/container-binaries/$(cat containername)/$(cat arch)/binaries/src/contrib" > "$LOGDIR/copied"
            mv runstarttime "$LOGDIR"/ || true
            mv uniquedeps.json "$LOGDIR"/ || true
            mv packages.json "$LOGDIR"/ || true
            mv biocdeps.json "$LOGDIR"/ || true
            mv tobuild.txt "$LOGDIR"/ || true
            mv lists "$LOGDIR"/lists || true
            mv bioc_build "$LOGDIR"/bioc_build || true

            git config user.email "action@github.com"
            git config user.name "GitHub Action"
            git add .
            git commit -m "Reset packages $STARTTIME"
            git push

