+ Rscript -e 'Sys.setenv(BIOCONDUCTOR_USE_CONTAINER_REPOSITORY=FALSE); p <- .libPaths(); p <- c('\''/tmp/tmp/built'\'', p); .libPaths(p); if(BiocManager::install('\''scran'\'', INSTALL_opts = '\''--build'\'', update = TRUE, quiet = FALSE, force = TRUE, keep_outputs = TRUE) %in% rownames(installed.packages())) q(status = 0) else q(status = 1)'
'getOption("repos")' replaces Bioconductor standard repositories, see
'help("repositories", package = "BiocManager")' for details.
Replacement repositories:
    CRAN: https://packagemanager.posit.co/cran/latest
Bioconductor version 3.17 (BiocManager 1.30.20), R 4.3.0 (2023-04-21)
Installing package(s) 'scran'
also installing the dependencies ‘sitmo’, ‘statmod’, ‘dqrng’

trying URL 'https://packagemanager.posit.co/cran/latest/src/contrib/sitmo_2.0.2.tar.gz'
Content type 'binary/octet-stream' length 132693 bytes (129 KB)
==================================================
downloaded 129 KB

trying URL 'https://packagemanager.posit.co/cran/latest/src/contrib/statmod_1.5.0.tar.gz'
Content type 'binary/octet-stream' length 91842 bytes (89 KB)
==================================================
downloaded 89 KB

trying URL 'https://packagemanager.posit.co/cran/latest/src/contrib/dqrng_0.3.0.tar.gz'
Content type 'binary/octet-stream' length 85587 bytes (83 KB)
==================================================
downloaded 83 KB

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/scran_1.28.1.tar.gz'
Content type 'application/x-gzip' length 1786563 bytes (1.7 MB)
==================================================
downloaded 1.7 MB

* installing *source* package ‘sitmo’ ...
** package ‘sitmo’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include   -fopenmp -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include   -fopenmp -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sitmo_demo.cpp -o sitmo_demo.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include   -fopenmp -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sitmo_parallel.cpp -o sitmo_parallel.o
g++ -std=gnu++17 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include/ -I'/usr/local/lib/R/site-library/Rcpp/include' -I/usr/local/include   -fopenmp -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c sitmo_runif.cpp -o sitmo_runif.o
g++ -std=gnu++17 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o sitmo.so RcppExports.o sitmo_demo.o sitmo_parallel.o sitmo_runif.o -llapack -lblas -lgfortran -lm -fopenmp -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-sitmo/00new/sitmo/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘sitmo’ as ‘sitmo_2.0.2_R_aarch64-unknown-linux-gnu.tar.gz’
* DONE (sitmo)
* installing *source* package ‘statmod’ ...
** package ‘statmod’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
using Fortran compiler: ‘GNU Fortran (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c expectedDeviance.c -o expectedDeviance.o
gfortran  -fPIC  -g -O2  -c gaussq2.f -o gaussq2.o
gcc -I"/usr/local/lib/R/include" -DNDEBUG   -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c init.c -o init.o
gcc -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o statmod.so expectedDeviance.o gaussq2.o init.o -lgfortran -lm -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-statmod/00new/statmod/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘statmod’ as ‘statmod_1.5.0_R_aarch64-unknown-linux-gnu.tar.gz’
* DONE (statmod)
* installing *source* package ‘dqrng’ ...
** package ‘dqrng’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -DSTRICT_R_HEADERS -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/sitmo/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -DSTRICT_R_HEADERS -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/sitmo/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c dqrng.cpp -o dqrng.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG -I../inst/include -DSTRICT_R_HEADERS -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/sitmo/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c generateSeedVectors.cpp -o generateSeedVectors.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o dqrng.so RcppExports.o dqrng.o generateSeedVectors.o -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-dqrng/00new/dqrng/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘dqrng’ as ‘dqrng_0.3.0_R_aarch64-unknown-linux-gnu.tar.gz’
* DONE (dqrng)
* installing *source* package ‘scran’ ...
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0’
using C++11
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c choose_effect_size.cpp -o choose_effect_size.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c combine_rho.cpp -o combine_rho.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c compute_blocked_stats.cpp -o compute_blocked_stats.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c compute_residual_stats.cpp -o compute_residual_stats.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c compute_rho_null.cpp -o compute_rho_null.o
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/usr/local/lib/R/site-library/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:281:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:281:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<int> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:191:13:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:191:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:321:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:322:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:322:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:218:14:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:218:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:355:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:356:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:356:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:239:14:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:239:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:373:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:374:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12: note: in a call to non-static member function ‘boost::RandomAccessRangeConcept<std::vector<int> >::~RandomAccessRangeConcept()’
  370 |     struct RandomAccessRangeConcept : BidirectionalRangeConcept<T>
      |            ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size_type.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/size.hpp:21,
                 from /usr/local/lib/R/site-library/BH/include/boost/random/hyperexponential_distribution.hpp:29,
                 from /usr/local/lib/R/site-library/BH/include/boost/random.hpp:70,
                 from rand_custom.h:6,
                 from compute_rho_null.cpp:3:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<int> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<int> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = std::vector<int>]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const int*, std::vector<int> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<int> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<int> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<int> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<int>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
compute_rho_null.cpp:33:37:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c cyclone_scores.cpp -o cyclone_scores.o
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
/usr/local/lib/R/site-library/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:152:13:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:278:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:281:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:281:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<double> >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:191:13:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:191:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:321:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:321:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:322:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:322:9:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:218:14:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:218:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:355:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:355:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:356:9:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:356:9:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>)>’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:239:14:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:239:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:373:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:374:9:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept/assert.hpp:35,
                 from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:20,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’:
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47: warning: ‘this’ pointer is null [-Wnonnull]
   50 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12: note: in a call to non-static member function ‘boost::RandomAccessRangeConcept<std::vector<double> >::~RandomAccessRangeConcept()’
  370 |     struct RandomAccessRangeConcept : BidirectionalRangeConcept<T>
      |            ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:31,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:19,
                 from /usr/local/lib/R/site-library/BH/include/boost/range/algorithm.hpp:29,
                 from cyclone_scores.cpp:4:
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<std::vector<double> >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:318:12:   required from ‘struct boost::ForwardRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:352:12:   required from ‘struct boost::BidirectionalRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:370:12:   required from ‘struct boost::RandomAccessRangeConcept<std::vector<double> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = std::vector<double>]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:181:16:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13:   required from ‘struct boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::ForwardIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::ForwardIteratorConcept<Iterator>::~ForwardIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:197:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  197 |             BOOST_CONCEPT_USAGE(ForwardIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::bidirectional_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::bidirectional_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14:   required from ‘struct boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::BidirectionalIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::BidirectionalIteratorConcept<Iterator>::~BidirectionalIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:224:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  224 |              BOOST_CONCEPT_USAGE(BidirectionalIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag>]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::random_access_traversal_tag> >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::random_access_traversal_tag]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’:
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:50:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >]’
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14:   required from ‘struct boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::RandomAccessIteratorConcept<__gnu_cxx::__normal_iterator<const double*, std::vector<double> > > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, boost::concepts::detail::wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::RandomAccessRangeConcept<std::vector<double> >]’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >::value’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::RandomAccessRangeConcept<std::vector<double> > >’
/usr/local/lib/R/site-library/BH/include/boost/concept/detail/general.hpp:72:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::RandomAccessRangeConcept<std::vector<double> >)>’
/usr/local/lib/R/site-library/BH/include/boost/range/algorithm/nth_element.hpp:33:5:   required from ‘RandomAccessRange& boost::range::random_shuffle(RandomAccessRange&, Generator&) [with RandomAccessRange = std::vector<double>; Generator = pcg_detail::engine<unsigned int, long unsigned int, pcg_detail::xsh_rr_mixin<unsigned int, long unsigned int>, true, pcg_detail::specific_stream<long unsigned int>, pcg_detail::default_multiplier<long unsigned int> >]’
cyclone_scores.cpp:115:41:   required from here
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:20:48: warning: ‘this’ pointer is null [-Wnonnull]
   20 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
/usr/local/lib/R/site-library/BH/include/boost/concept/usage.hpp:37:7: note: in a call to non-static member function ‘boost::range_detail::RandomAccessIteratorConcept<Iterator>::~RandomAccessIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<const double*, std::vector<double> >]’
   37 |       ~model()
      |       ^
/usr/local/lib/R/site-library/BH/include/boost/range/concepts.hpp:245:14: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  245 |              BOOST_CONCEPT_USAGE(RandomAccessIteratorConcept)
      |              ^~~~~~~~~~~~~~~~~~~
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c overlap_exprs.cpp -o overlap_exprs.o
g++ -std=gnu++11 -I"/usr/local/lib/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/Rcpp/include' -I'/tmp/tmp/built/beachmat/include' -I'/usr/local/lib/R/site-library/BH/include' -I'/tmp/tmp/built/dqrng/include' -I'/tmp/tmp/built/scuttle/include' -I/usr/local/include    -fPIC  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -c rand_custom.cpp -o rand_custom.o
g++ -std=gnu++11 -shared -L/usr/local/lib/R/lib -L/usr/local/lib -o scran.so RcppExports.o choose_effect_size.o combine_rho.o compute_blocked_stats.o compute_residual_stats.o compute_rho_null.o cyclone_scores.o overlap_exprs.o rand_custom.o -llapack -lblas -lgfortran -lm -L/usr/local/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-scran/00new/scran/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘scran’ as ‘scran_1.28.1_R_aarch64-unknown-linux-gnu.tar.gz’
* DONE (scran)

The downloaded source packages are in
	‘/tmp/RtmpB9Q8K1/downloaded_packages’
Old packages: 'S4Arrays', 'cachem', 'evaluate', 'httpuv', 'httr', 'httr2',
  'later', 'profvis', 'sass', 'testthat', 'tzdb', 'viridisLite', 'waldo',
  'class', 'KernSmooth', 'MASS', 'nnet'

real	19m30.927s
user	19m8.129s
sys	0m17.662s
